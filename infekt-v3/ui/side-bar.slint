import { HorizontalBox, VerticalBox, Palette } from "std-widgets.slint";

export struct SideBarItemDefinition {
    label-text: string,
    icon: image,
}

component SideBarItem inherits Rectangle {
    in property <bool> selected;
    in property <bool> has-focus;
    in-out property <string> text <=> label.text;
    in-out property <image> icon <=> icon.source;

    callback clicked <=> touch.clicked;

    min-height: l.preferred-height;

    states [
        pressed when touch.pressed: {
            state.opacity: 0.8;
        }
        hover when touch.has-hover: {
            state.opacity: 0.6;
        }
        selected when root.selected: {
            state.opacity: 1;
        }
        focused when root.has-focus: {
            state.opacity: 0.8;
        }
    ]

    state := Rectangle {
        opacity: 0;
        background: Palette.background;

        animate opacity { duration: 150ms; }
    }

    l := HorizontalBox {
        y: (parent.height - self.height) / 2;
        spacing: 8px;

        icon := Image {
            width: 24px;
            height: 24px;
            horizontal-alignment: center;
            vertical-alignment: center;
        }

        label := Text {
            vertical-alignment: center;
        }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}

export component SideBar inherits Rectangle {
    in property <[SideBarItemDefinition]> model: [];

    out property <int> current-item: 0;
    out property <int> current-focused: fs.has-focus ? fs.focused-tab : -1;
    in-out property <bool> collapsed: true;

    width: collapsed ? 48px : 180px;
    animate width {
        duration: 150ms;
        easing: ease;
    }

    forward-focus: fs;
    accessible-role: tab;
    accessible-delegate-focus: root.current-focused >= 0 ? root.current-focused : root.current-item;

    Rectangle {
        background: Palette.background.darker(0.2);

        fs := FocusScope {
            key-pressed(event) => {
                if (event.text == "\n") {
                    root.current-item = root.current-focused;
                    return accept;
                }
                if (event.text == Key.UpArrow) {
                    self.focused-tab = Math.max(self.focused-tab - 1,  0);
                    return accept;
                }
                if (event.text == Key.DownArrow) {
                    self.focused-tab = Math.min(self.focused-tab + 1, root.model.length - 1);
                    return accept;
                }
                return reject;
            }

            key-released(event) => {
                if (event.text == " ") {
                    root.current-item = root.current-focused;
                    return accept;
                }
                return reject;
            }

            property <int> focused-tab: 0;

            x: 0;
            width: 0; // Do not react on clicks
        }
    }

    VerticalBox {
        padding-left: 0px;
        padding-right: 0px;
        alignment: start;

        if (!collapsed): Text {
            font-size: 16px;
            horizontal-alignment: center;
            font-weight: 600;
            text: "iNFekt v3";
        }

        if (collapsed): VerticalBox {
            spacing: 0;

            Image {
                height: 32px;
                source: @image-url("../assets/infekt-icons/iNFekt_6_256x256x32.png");
            }
        }

        navigation := VerticalLayout {
            alignment: start;
            vertical-stretch: 0;
            for item[index] in root.model: SideBarItem {
                clicked => {
                    root.current-item = index;
                }

                has-focus: index == root.current-focused;
                text: collapsed ? "" : item.label-text;
                icon: item.icon;
                selected: index == root.current-item;
            }
        }
    }

    Rectangle { }

    VerticalLayout {
        alignment: end;

        Rectangle {
            height: 40px;
            background: Palette.control-background;

            Image {
                source: collapsed ? @image-url("../assets/tabler-icons/outline/layout-sidebar-left-expand.svg") : @image-url("../assets/tabler-icons/outline/layout-sidebar-left-collapse.svg");
                width: 24px;
                height: 24px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }

            TouchArea {
                clicked => {
                    collapsed = !collapsed;
                }
            }
        }
    }
}
